ai <- unlist(a[altSnp]) # all length 1, so unlisting is 1:1 map
altSnp[altSnp] <- nchar(ai) == 1L & (ai %in% c("A", "C", "G", "T"))
!(refSnp & altSnp)
}))
destination.file <- tempfile()
filtered <- filterVcf(y, seqinfo(genome), destination, prefilters=pre, filters=filt)
fvcf <- readVcf(filtered, seqinfo(genome))
return(fvcf)
}
filtersnps(novelvcf,BSgenome.Hsapiens.NCBI.GRCh38)
filtersnps(y=novelvcf,genome=BSgenome.Hsapiens.NCBI.GRCh38)
filtersnps=function(y, genome){
x=readVcf(y, seqinfo(genome))
pre <- FilterRules(list(isLowCoverageExomeSnp = function(x) {#pre filter
!(grepl("dbsnp", x, fixed=TRUE))}))
filt <- FilterRules(list(isnotsnp = function(x) {#filter
refSnp <- nchar(ref(x)) == 1L
a <- alt(x)
altSnp <- elementLengths(a) == 1L
ai <- unlist(a[altSnp]) # all length 1, so unlisting is 1:1 map
altSnp[altSnp] <- nchar(ai) == 1L & (ai %in% c("A", "C", "G", "T"))
!(refSnp & altSnp)
}))
destination.file <- tempfile()
filtered <- filterVcf(x, seqinfo(genome), destination, prefilters=pre, filters=filt)
fvcf <- readVcf(filtered, seqinfo(genome))
return(fvcf)
}
filtersnps(y=novelvcf,genome=BSgenome.Hsapiens.NCBI.GRCh38)
x=readVcf(novelvcf, seqinfo(BSgenome.Hsapiens.NCBI.GRCh38))
x=readVcf(vcf, seqinfo(BSgenome.Hsapiens.NCBI.GRCh38))
x=readvcf(vcf, seqinfo(BSgenome.Hsapiens.NCBI.GRCh38))
vcf <- readVcf(novelvcf, seqinfo(BSgenome.Hsapiens.NCBI.GRCh38))
vcf <- readVcf(x, seqinfo(genome))
novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38  )
novvcf=function(x, genome, dbsnp)    {
genome=BSgenome.Hsapiens.NCBI.GRCh38
x=system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
dbsnp=SNPlocs.Hsapiens.dbSNP141.GRCh38
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating ch22 snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
return(novelvcf)
}
novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38  )
vcf <- readVcf(novelvcf, seqinfo(BSgenome.Hsapiens.NCBI.GRCh38))
?readVcf
novelvcf
novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38  )
novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38  )
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38  )
source("http://bioconductor.org/biocLite.R")
biocLite("VariantAnnotation") #install the package
library("VariantAnnotation") #load the package
biocLite("BSgenome.Hsapiens.NCBI.GRCh38")
library("BSgenome.Hsapiens.NCBI.GRCh38")
biocLite("SNPlocs.Hsapiens.dbSNP141.GRCh38")
library("SNPlocs.Hsapiens.dbSNP141.GRCh38")
novvcf=function(x=x, genome=genome, dbsnp=dbsnp)    {
#genome=BSgenome.Hsapiens.NCBI.GRCh38 #assign genome variable
#x=system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")#assign ice-seq variable
#dbsnp=SNPlocs.Hsapiens.dbSNP141.GRCh38 #assign dbsnp variable
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating ch22 snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novel=novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
rowRanges(novel)
info(novel)
?"snplocs"
?"seqnames"
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, c('ch1', "ch2", 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11', 'ch12', 'ch13', "ch14", 'ch14', 'ch15', 'ch16', 'ch17', 'ch18', 'ch19', 'ch21', 'ch22', 'ch23', 'chX', 'chY', 'chMT'), as.GRanges = TRUE)#locating ch22 snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
```
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, c('ch1', "ch2", 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11', 'ch12', 'ch13', "ch14", 'ch14', 'ch15', 'ch16', 'ch17', 'ch18', 'ch19', 'ch21', 'ch22', 'ch23', 'chX', 'chY', 'chMT'), as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
lapply(ch1:chMT snps(x){snps=  snplocs(dbsnp, x, as.GRanges = TRUE)})
lapply(ch1:chMT, snps(x){snps=  snplocs(dbsnp, x, as.GRanges = TRUE)})
lapply(ch1:chMT, snps(x) snplocs(dbsnp, x, as.GRanges = TRUE))
lapply(ch1:chMT, nplocs(dbsnp, x, as.GRanges = TRUE))
info(novel)
rowRanges(novel)
info(novel)
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- isSNV(readVcf(x, seqinfo(genome)))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, c('ch1', "ch2", 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11', 'ch12', 'ch13', "ch14", 'ch14', 'ch15', 'ch16', 'ch17', 'ch18', 'ch19', 'ch21', 'ch22', 'ch23', 'chX', 'chY', 'chMT'), as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- isSNV(readVcf(x, seqinfo(genome)))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, "ch22", as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novel=novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
```
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, "ch22", as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novel=novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, "ch22", as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novel=novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, "ch22", as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novel=novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
info(novel)
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, "ch22", as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
novelvcf=novvcf[isSNV(novvcf)]
}
novel=novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
info(novel)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(novvcf)]
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, "ch22", as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, "ch22", as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
info(novelSNVs)
?`trim,GenomicRanges-method`
trim(novelSNVs)
trim(rowRanges(novelSNVs))
novelSNVs[trim(rowRanges(novelSNVs))]
rdt=trim(rowRanges(novelSNVs))
rd=rowRanges(novelSNVs)
trimmed <-  (sub("rs", "", names(rd))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=vcf[trimmed]
rdt=trim(rowRanges(novelSNVs))
rd=rowRanges(novelSNVs)
trimmed <-  (sub("rs", "", names(rd))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSNVs[trimmed]
rowRanges(trimmedVcf)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, c('ch1', "ch2", 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11', 'ch12', 'ch13', "ch14", 'ch14', 'ch15', 'ch16', 'ch17', 'ch18', 'ch19', 'ch21', 'ch22', 'ch23', 'chX', 'chY', 'chMT'), as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvss))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSNVs[trimmed]
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvss))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSNVs[trimmed]
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvs))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSNVs[trimmed]
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvs))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSnvs[trimmed]
}
novelSnvVcf=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvs))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSnvs[trimmed]
}
novelSnvVcf=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvs))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSnvs[trimmed]
return(trimmedVcf)
}
novelSnvVcf=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvs))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSnvs[trimmed]
return(trimmedVcf)
}
trimmedAndNovelVcf=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
rowRanges(trimmedAndNovelVcf)
novelTrimmedSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvs))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSnvs[trimmed]
}
newVcf=novelTrimmedSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
rowRanges(newVcf)
seqlengths(newVcf)
novelTrimmedSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rdt=trim(rowRanges(novelSnvs))
rd1=rowRanges(novelSnvs)
trimmed <-  (sub("rs", "", names(rd1))%in% sub("rs", "", names(rdt)))#matching snps to vcf
trimmedVcf=novelSnvs[trimmed]
}
newVcf=novelTrimmedSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
rowRanges(newVcf)
seqlengths(newVcf)
isCircular(newVcf)
trim(newVcf)
rdt=trim(rowRanges(newVcf))
rd1=rowRanges(newVcf)
rdt
rd1=rowRanges(newVcf)
rd1
novvcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelvcf=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novel=novvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
```
rowRanges(novel)
library("VariantAnnotation") #load the package
library("BSgenome.Hsapiens.NCBI.GRCh38")
library("SNPlocs.Hsapiens.dbSNP141.GRCh38")
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
seqlengths(novelSNVs)
isCircular(novelSNVs)
trim(novelSNVs)
trim(rowRanges(novelSNVs))
rowRanges(novelSNVs)
trimmed=rowRanges(novelSNVs)=trim(rowRanges(novelSNVs))
rowRanges(trimm)=trim(rowRanges(novelSNVs))
trim(rowRanges(novelSNVs))=rowRanges(trimm)
rowRanges(novelSNVs)=trim(rowRanges(novelSNVs))
novelSNVs
rowRanges(novelSNVs)
head(rowRanges(novelSNVs))
rowRanges(novelSNVs)[50:75]
?trim
```{r}
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rowRanges(novelSnvs)=trim(rowRanges(novelSnvs))
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
rowRanges(novelSnvs)=trim(rowRanges(novelSnvs))
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSnvVcf=function(x=x, genome=genome, dbsnp=dbsnp){
vcf0 <- readVcf(x, seqinfo(genome))#creating vcf from sample data and genome
vcf=vcf0[isSNV(vcf0)]#only looking at snv's
rd <- rowRanges(vcf)#grange to acces names
snps=  snplocs(dbsnp, 'ch22', as.GRanges = TRUE)#locating  snps
notdbsnpchr22 <-  !(sub("rs", "", names(rd))%in% snps$RefSNP_id)#matching snps to vcf
novelSnvs=vcf[notdbsnpchr22]#creating new vcf including only novel variants
}
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
novelSNVs=trim(novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38))
novelSNVs=trim(rowRanges(novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)))
novelSNVs=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), BSgenome.Hsapiens.NCBI.GRCh38, SNPlocs.Hsapiens.dbSNP141.GRCh38)
biocLite("TxDb.Hsapiens.UCSC.hg38.knownGene")
source("http://bioconductor.org/biocLite.R")
biocLite("TxDb.Hsapiens.UCSC.hg38.knownGene")
txdb=TxDb.Hsapiens.UCSC.hg38.knownGene
library("TxDb.Hsapiens.UCSC.hg38.knownGene")
txdb=TxDb.Hsapiens.UCSC.hg38.knownGene
locateVariants(novelSNVs, txdb, AllVariants())
source("http://bioconductor.org/biocLite.R")
biocLite("VariantAnnotation") #install the package
library("VariantAnnotation") #load the package
rowRanges(novelSNVs)[50:75]
seqlengths(novelSNVs)
trim(rowRanges(novelSNVs)[50:75])
trim(rowRanges(novelSNVs))
rowRanges(novelSNVs)
info(novelSNVs)
novelSNVs
sum(info(novelSNVs)mcolm$AC)
?mcolm
?/mcolm
??mcolm
novelSNVs
info(novelSNVs)
header(novelSNVs)
head(novelSNVs)
info(novelSNVs)
novelSNVs
library(seqmine)
install.packages(seqmine)
install.packages(seqminer)
install.packages("seqminer"")
install.packages("seqminer")
install.packages("seqminer")
library(seqminer)
source("http://bioconductor.org/biocLite.R")
biocLite("VariantAnnotation") #install the package
library("VariantAnnotation") #load the package
biocLite("BSgenome.Hsapiens.NCBI.GRCh38")
biocLite("BSgenome.Hsapiens.NCBI.GRCh38")
library("BSgenome.Hsapiens.NCBI.GRCh38")
rowRanges(novelSNVs)
info(novelSNVs)
rnavcf=readVcf(x, seqinfo(BSgenome.Hsapiens.NCBI.GRCh38))
rnavcf=readVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation"), seqinfo(BSgenome.Hsapiens.NCBI.GRCh38))
fl=system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
gen=seqinfo(BSgenome.Hsapiens.NCBI.GRCh38)
library("BSgenome.Hsapiens.NCBI.GRCh38")
rnavcf=readVcf(fl,"hg19")
param <- list(AC=>2 && Erate<.05)
param <- list(AC>=2 && Erate<.05)
AC(info(rnavcf))
info(rnavcf)
rnavcf
param <- list(info(rnavcf)$AC>=2 && info(rnavcf)$Erate<.05)
param <- list(info(rnavcf)$AC>=2, info(rnavcf)$Erate<.05)
param <- makeAnnotationParameter(param)
param2 <- makeAnnotationParameter(param)
info(rnavcf)$AC>=2
info(rnavcf)$Erate<.05
info(rnavcf)$Erate< .05
param <- list(info(rnavcf)$AC>=2, info(rnavcf)$ERATE< .05)
param2 <- makeAnnotationParameter(param)
info(rnavcf)$ERATE< .05
param <- (info(rnavcf)$AC>=2 && info(rnavcf)$ERATE< .05)
param <- (info(rnavcf)$AC>=2)
param2 <- info(rnavcf)$ERATE< .05)
param2 <- info(rnavcf)$ERATE< .05)
param2 <- info(rnavcf)$ERATE< .05
rnavcf[param & param2]
rnavcf[param && param2]
rnavcf[param, param2]
rnavcf[param & param2]
vcf1=vcf1[param][param2]
vcf1=rnavcf[param][param2]
vcf1=rnavcf[param]
fl=system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
rnavcf=readVcf(fl,"hg19")
filt <- FilterRules(list(info(rnavcf)$AC>=2, info(rnavcf)$ERATE< .05)
0
filt <- FilterRules(list(info(rnavcf)$AC>=2, info(rnavcf)$ERATE< .05))
filt <- FilterRules(list(info(x)$AC>=2, info(x)$ERATE< .05))
info(rnavcf)$ERATE< .05}))
filt <- FilterRules(ac=function(x) {list(info(x)$AC>=2},er=function(x){
filt <- FilterRules(ac=function(x) {list(info(x)$AC>=2,
info(x)$ERATE< .05}))
fl=novelSnvVcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
fl=readvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
)
source("http://bioconductor.org/biocLite.R")
biocLite("VariantAnnotation") #install the package
library("VariantAnnotation") #load the package
fl=readvcf(system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
)
fl=system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
vcf<- readVcf(fl, "hg19")
inf=info(vcf)
inf
ER <- inf$ERATE
ER
ER <- inf$ERATE<.05
ER
novelSnvs=vcf[er]
novelSnvs=vcf[ER]
er<- inf$ERATE<.05
ervcf=vcf[er]
ervcf=vcf[info(vcf)$ERATE<.05]
ervcf
2vcf=ervcf[info(ervcf)$AC>=2]
ervcf[info(ervcf)$AC>=2]
info(ervcf)$AC>=2
ac=info(ervcf)$AC>=2
acvcf=ervcf[ac]
fl=system.file("extdata", "chr22.vcf.gz", package="VariantAnnotation")
vcf<- readVcf(fl, "hg19")
ervcf=vcf[info(vcf)$ERATE<.05]
ac=info(ervcf)$AC>=2
acvcf=ervcf[ac]
acvcf=vcf[ac]
vcf[info(vcf)$ERATE<.05]
vcf<- readVcf(fl, "hg19")
info(vcf)$ERATE<.05
vcf<- readVcf(fl, "hg19")
vcf
ac=info(ervcf)$AC>=2
ac
info(vcf)$ERATE<.05
?wilcox.test()
info(vcf)
